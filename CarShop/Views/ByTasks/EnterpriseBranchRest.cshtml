@using CarShop.Properties;
@{
    ViewBag.Title = "EnterpriseBranchRest";
    Layout = "~/Views/ByTasks/_Layout.cshtml";
}

@section headerscripts {
    <h2>4. Управление остатками подразделения</h2>
}

<h2>РОЛЬ: Главный продавец(бухгалтер) подразделения</h2>
Остатки товара в разрезе каждого магазина торговой сети.
Поэтому право на внесение изменений присвоено роли лавный продавец(бухгалтер) подразделения. <p />

<h3>Управление остатками</h3>
Перейдите по ссылке
@Html.ActionLink(Resources.BranchRest_INDEX, "Index", "EnterpriseBranchRest", routeValues: null, htmlAttributes: new { @class = "btn btn-xs btn-primary" })

Данная форма позволяет управлять остатками по подразделению. Когда в этом есть необходимость. Как говаривал неизвестный персонаж: "Раз в год и палка стреляет". 
Если был сбой в работе (электричество и т.п.) вы провели выверку переоценок, продаж и прихода. Окакзалось, что или остаток или цена товара не такие, какими должны быть. 
В этом случае проводится интервенция в остатки. Важным замечанием является следующее. Если вы запускаете данное решение в эксплуатацию, то никто не вносит продажи с со дня сотворения мира. 
Как правило вносятся остатки в систему и дело пошло.<p />
Но.<p />
Напомним, что ведомости переоценок формируются не на текущем остатке, а на приходных ведомостях. 
Если внести остатки в систему используя инструмент управления остатками и не создавать приходных ведемостей, то в сухом остатке получим не учетный механизм, 
но дохлого осла уши. Чтобы решить эту проблему необходимо внести остатки не через Управление остатками подразделения, но через создание одной или нескольких 
ведомостей прихода. Т.Е. при запуске этого программного обеспечения в работу создаейте остатки через механизм приходных ведеомостей. Оприходуйте их. 
При таком сценарии ввода в работу данного решения вы получаете автоматическое формирование ведомостей переоценки по приходным ведомостям. 
Все что потребуется - это выверка и проведение.