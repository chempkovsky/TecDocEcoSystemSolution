
@{
    ViewBag.Title = "Задачи и роли";
    Layout = "~/Views/ByTasks/_Layout.cshtml";
}

@section headerscripts {
    <h2>Задачи и роли</h2>
}
<h2>Реализованный функционал</h2>

                1. @Html.ActionLink("Каталог артикулов", "Articles", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Для нормального ведения бизнеса первым делом необходимо сформировать <b>каталог артикулов</b>, которыми торгует подразделение.<br />
                    Будучи сформированным, данный каталог может дополняться по мере расширения ассортимента.<br />
                    <b>РОЛЬ: Администратор предприятия</b>
                <hr />

                2. @Html.ActionLink("Приход на магазин", "Income", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    До проведения продаж необходимо иметь остатки товара и цены.<br />
                    С другой стороны, необходимо фиксировать взаимодействие с поставщиками товаров.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                <hr />

                3. @Html.ActionLink("Управление ведомостями переоценки", "SheetRevaluation", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    по мере работы любого торгового подразделения возникает необходимость в уценке или переоценке тех или других наименований товара.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                 <hr />
                
                4. @Html.ActionLink("Управление остатками подразделения", "EnterpriseBranchRest", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Остатки товара в разрезе каждого магазина торговой сети.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                <hr />


                5. @Html.ActionLink("Управление сменой", "BranchSpell", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Подразделение не может провести продажу вне рамок како-либо открытой смены.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                <hr />

                6. @Html.ActionLink("Размещение исполнителей по рабочим местам", "User2WorkPlace", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Смена открывается в заблокированном состоянии. После открытия смены необходимо разместить пользователей по рабочим местам. После этого выполнить разблокировку смены.
                    <br />
                    <div class="alert alert-danger">
                        Пользователь не может провести продажу, если он не закреплен за рабочим местом.
                    </div>
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                <hr />


                7. @Html.ActionLink("Списание с прихода после закрытия смены", "BranchSpellHst", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    После закрытия смены необходимо урегулировать остатки по приходным ведомостям. Во время проведения продаж происходит списание остатков в каталоге остатков.
                    Количественного списания с остатков приходных ведомостей не проводится. Это осуществляется после закрытия смены, когда уже невозможно сторнирование.<br />
                    <div class="alert alert-danger">
                        При игнорировании данного регламента не будет возможности корректно формировать и вести ведомости переоценки.
                        Напомним, что обработка ведомостей переоценки осуществляется на данных каталога приходных ведомостей.
                    </div>

                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                <hr />

                8. @Html.ActionLink("Проведение продаж", "SaleBasket", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Приводится регламент работы продавца магазина. Описывается порядок создания корзины, наполнения корзины товаром,
                    переключение между корзинами, оплата и сторнирование.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />

                9. @Html.ActionLink("Возврат товара", "ReturnBasket", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    <div class="alert alert-danger">
                        <b>Замечание:</b> Мы не рекомендуем пользоваться данным функционалом. При проведении возврата должен вырасти остаток по артикулу в какой-либо приходной ведомости.
                        В качестве такой ведомости выбирается первая попавшаяся (что не есть хорошо), у которой остаток по артикулу меньше количества поступившего товара по данной ведомости.
                        Мы рекомендуем воспользоваться механизмом приходных ведомостей (и ведомостей переоценки), чтобы зафиксировать возврат товара:
                        оформите приходную ведомость на перечне товаров, который возвращается на магазин.
                    </div>
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />


                10. @Html.ActionLink("Создание заказов по телефону", "BranchGuestProfile", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Если ваш магазин принимает заказы по телефону, то вы можете оформить заказ, создав профиль заказа и наполнив карзину товаров.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />

                11. @Html.ActionLink("Репликации заказов", "DoMakeOrdersReply", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Помимо создания заказов по телефону подразделение может публиковать свои остатки и цены в Интернет.
                    При такой архитектуре посетители сайта могут создавать заказы удаленно. Чтобы такие заказы стали видны на площадке магазина
                    необходимо выполнять репликацию данных с сайта Интернет.
                    <br />
                    Помимо получения данных с площадки магазина происходит отправка данных по тем заказам, которые уже были обработаны.
                    В этом случае посетители сайта могут увидеть, прибудет ли курьер с заказом на адрес, указанный в профиле посетителя.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />

                12. @Html.ActionLink("Обработка заказов", "BranchOrderSearch", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Источником заказов к обработке могут быть заказы на магазин по телефону и заказы созданные удаленно пользователями в интернет.
                    После репликации данных с Интернет сервера на площадку магазина, заказы созданные удаленно станут видны на площадке магазина.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />

                13. @Html.ActionLink("Репликация остатков", "DoMakeReply", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    В результате проведения продаж и обработки новых поступлений товара остатка и цены по магазину будет изменяться.
                    Если магазин публикует свои остатки и цены в интернет требуется периодически выполнять репликацию остатков и цен с площадки магазина
                    на удаленный сервер интернет.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                <hr />

                14. @Html.ActionLink("Стол заказов", "TableOfOrders", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Стол заказов предоставляет следующие возможности:<br />
                    <b>Первое:</b>
                    Магазин опубликует свои товары (количество и цены), которые есть в наличии или под заказ. <br />
                    <b>Второе:</b>
                    Покупатель может просматривать цены на товары, которые есть как в наличии в магазине так и на товары, которые магазин может выписать у своих поставщиков для покупателя.<br />
                    <b>Третье:</b>
                    Покупатель может сформировать заявку на товары магазина, которые есть как в наличии так и под заказ.<br />
                    <b>Четвертое:</b>
                    Магазин может видеть заявки покупателей и обработать эти заявки.
                    <br />
                    <b>РОЛЬ: Администратор подразделения</b>
                    <hr />

                15. @Html.ActionLink("Расщирение каталога TecDoc", "TecDocExpansion", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Некоторые оптовые поставщики товаров торгуют товаром, описание которого отсутствует в TecDoc.
                    Как правило, на ряду с такого рода товаром для розничного бизнеса предоставляется информация об аналогах или кроссах.
                    Информация об аналогах это пара: новый артикул (он отсутствует в TecDoc) и аналог (он заведомо описан в TecDoc).
                    Имея такую информацию очень легко достроить для нового артикула полную картину, а именно, на каких атомобилях может применяться,
                    с какими конструкционными номерами он должен быть сопоставлен.
                    <br />
                    <b>РОЛЬ: Администратор подразделения</b>
                    <hr />

                16. @Html.ActionLink("Оригинальные каталоги", "OriginalCatalogs", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Реализация поиска артикулов по оригинальным каталогам аналогична той, которая принята в www.exist.by.
                    Добавление поиска в оригинальных каталогах осуществляется в два щага:<br />
                    <b>Шаг 1:</b> Регистрация у поставщика информации<br />
                    <b>Шаг 2:</b> Регистрация ссылки на вашем сайте<br />
                    <b>РОЛЬ: Администратор предприятия</b>
                    <hr />

                17. @Html.ActionLink("Остатки поставщиков", "SupplierRests", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Позволяет публиковать не только остатки вашего магазина, но цены и остатки ваших поставщиков товара.
                    Это позволяет посетителю вашего сайта выполнить заказ как товара, который есть в наличии, так и товара, который есть в наличии у вашего поставщика.
                    Ясно, что продажа такого товарабудет проведена с задержкой. С другой стороны, такой подход расширяет перечень товаров, которыми торгует ваш магазин.
                    Добавление остатков поставщика осуществляется в три щага:<br />
                    <b>Шаг 1:</b> Регистрация поставщика, остатки которого вы хотите публиковать как свои собственные<br />
                    <b>Шаг 2:</b> Получение остатков и цен с сайта поставщика<br />
                    <b>Шаг 3:</b> Загрузка остатков и цен поставщика на свой сайт<br />
                    <b>РОЛЬ: Администратор подразделения</b>
                    <hr />

                18. @Html.ActionLink("Остатки внешней учетной системы", "ExternalRests", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                    Позволяет публиковать остатки вашего магазина, если вы используете внешнюю учетную систему. 
                    Если для учета продаж вы используете свое собственное программное обеспечение, тем не менее можете загружать остатки и цены в картотеку сола заказов.
                    Добавление остатков и цен осуществляется в три щага:<br />
                    <b>Шаг 1:</b> Выгрузка остатков и цен вашего магазина в формате CSV или Excel<br />
                    <b>Шаг 2:</b> Загрузка остатков в промежуточную картотеку<br />
                    <b>Шаг 3:</b> Загрузка остатков и цен на свой сайт<br />
                    <b>РОЛЬ: Администратор подразделения</b>
                    <hr />

                19. @Html.ActionLink("Утилита CarShopRestToWeb.exe (1)", "CarShopRestToWeb", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                    <b>1.</b> Позволяет расширить каталог TecDoc ноывми артикулами.<br />
                    <b>2.</b> Позволяет загрузить остатки и цены оптовых поставщиков в стол заказов.<br />
                    <b>3.</b> Позволяет загрузить остатки и цены вашего магазина в стол заказов, если вы у себя используете другую учетную систму и вам нужен только интернет магазин<br />
                    <hr />
                    
                20. @Html.ActionLink("Утилита CarShopRestToWeb.exe (2)", "CarShopRestToWeb2", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Позволяет Загрузить остатки и цены вашего магизина в интернет магазин.<br />
                    <hr />

                21. @Html.ActionLink("Утилита CarShopRestToWeb.exe (3)", "CarShopRestToWeb3", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Позволяет Загрузить остатки и цены ваших поставщиков в интернет магазин.<br />
                    <hr />

                22. @Html.ActionLink("Утилита CarShopRestToWeb.exe (4)", "CarShopRestToWeb4", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Позволяет расширить каталог TecDoc ноывми артикулами, для которых нет аналогов в TecDoc<br />
                <hr />

                23. @Html.ActionLink("Утилита CarShopRestToWeb.exe (5)", "CarShopRestToWeb5", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Позволяет расширить каталог TecDoc ноывми артикулами из PDF-файлов производителей<br />
                <hr />

                24. @Html.ActionLink("Интернет магазин", "InternetShop", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Сводная статья, описывающая регламент работы с интернет магазином.<br />
                    <hr />

                25. @Html.ActionLink("Загрузки", "Dounloads", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })<br />
                <b>1.</b> Сводная статья, описывающая описывающая ресурсы для загрузки.<br />
                <hr />



        @*<ul class="list-group">
            <li class="list-group-item">
                1. @Html.ActionLink("Каталог артикулов", "Articles", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Для нормального ведения бизнеса первым делом необходимо сформировать <b>каталог артикулов</b>, которыми торгует подразделение.<br />
                    Будучи сформированным, данный каталог может дополняться по мере расширения ассортимента.<br />
                    <b>РОЛЬ: Администратор предприятия</b>
                </p>
            </li>
            <li class="list-group-item">
                2. @Html.ActionLink("Приход на магазин", "Income", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    До проведения продаж необходимо иметь остатки товара и цены.<br />
                    С другой стороны, необходимо фиксировать взаимодействие с поставщиками товаров.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>
            <li class="list-group-item">
                3. @Html.ActionLink("Управление ведомостями переоценки", "SheetRevaluation", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    по мере работы любого торгового подразделения возникает необходимость в уценке или переоценке тех или других наименований товара.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                4. @Html.ActionLink("Управление остатками подразделения", "EnterpriseBranchRest", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Остатки товара в разрезе каждого магазина торговой сети.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                5. @Html.ActionLink("Управление сменой", "BranchSpell", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Подразделение не может провести продажу вне рамок како-либо открытой смены.<br />
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                6. @Html.ActionLink("Размещение исполнителей по рабочим местам", "User2WorkPlace", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Смена открывается в заблокированном состоянии. После открытия смены необходимо разместить пользователей по рабочим местам. После этого выполнить разблокировку смены.
                    <br />
                    <div class="alert alert-danger">
                        Пользователь не может провести продажу, если он не закреплен за рабочим местом.
                    </div>
                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>


            <li class="list-group-item">
                7. @Html.ActionLink("Списание с прихода после закрытия смены", "BranchSpellHst", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    После закрытия смены необходимо урегулировать остатки по приходным ведомостям. Во время проведения продаж происходит списание остатков в каталоге остатков.
                    Количественного списания с остатков приходных ведомостей не проводится. Это осуществляется после закрытия смены, когда уже невозможно сторнирование.<br />
                    <div class="alert alert-danger">
                        При игнорировании данного регламента не будет возможности корректно формировать и вести ведомости переоценки.
                        Напомним, что обработка ведомостей переоценки осуществляется на данных каталога приходных ведомостей.
                    </div>

                    <b>РОЛЬ: Главный продавец(бухгалтер) подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                8. @Html.ActionLink("Проведение продаж", "SaleBasket", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Приводится регламент работы продавца магазина. Описывается порядок создания корзины, наполнения корзины товаром,
                    переключение между корзинами, оплата и сторнирование.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                9. @Html.ActionLink("Возврат товара", "ReturnBasket", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    <div class="alert alert-danger">
                        <b>Замечание:</b> Мы не рекомендуем пользоваться данным функционалом. При проведении возврата должен вырасти остаток по артикулу в какой-либо приходной ведомости.
                        В качестве такой ведомости выбирается первая попавшаяся (что не есть хорошо), у которой остаток по артикулу меньше количества поступившего товара по данной ведомости.
                        Мы рекомендуем воспользоваться механизмом приходных ведомостей (и ведомостей переоценки), чтобы зафиксировать возврат товара:
                        оформите приходную ведомость на перечне товаров, который возвращается на магазин.
                    </div>
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                10. @Html.ActionLink("Создание заказов по телефону", "BranchGuestProfile", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Если ваш магазин принимает заказы по телефону, то вы можете оформить заказ, создав профиль заказа и наполнив карзину товаров.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                11. @Html.ActionLink("Репликации заказов", "DoMakeOrdersReply", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Помимо создания заказов по телефону подразделение может публиковать свои остатки и цены в Интернет.
                    При такой архитектуре посетители сайта могут создавать заказы удаленно. Чтобы такие заказы стали видны на площадке магазина
                    необходимо выполнять репликацию данных с сайта Интернет.
                    <br />
                    Помимо получения данных с площадки магазина происходит отправка данных по тем заказам, которые уже были обработаны.
                    В этом случае посетители сайта могут увидеть, прибудет ли курьер с заказом на адрес, указанный в профиле посетителя.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>


            <li class="list-group-item">
                12. @Html.ActionLink("Обработка заказов", "BranchOrderSearch", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    Источником заказов к обработке могут быть заказы на магазин по телефону и заказы созданные удаленно пользователями в интернет.
                    После репликации данных с Интернет сервера на площадку магазина, заказы созданные удаленно станут видны на площадке магазина.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>

            <li class="list-group-item">
                13. @Html.ActionLink("Репликация остатков", "DoMakeReply", "ByTasks", routeValues: null, htmlAttributes: new { @class = "btn btn-info btn-xs" })
                <p class="list-group-item-text">
                    В результате проведения продаж и обработки новых поступлений товара остатка и цены по магазину будет изменяться.
                    Если магазин публикует свои остатки и цены в интернет требуется периодически выполнять репликацию остатков и цен с площадки магазина
                    на удаленный сервер интернет.
                    <br />
                    <b>РОЛЬ: Продавец подразделения</b>
                </p>
            </li>

        </ul>*@
